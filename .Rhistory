for (i in 0:MAXCOUNT) {
ref <- timePull(Sys.Date() - i, sat)
ref$time.parsed <-
ref$time.parsed %>% strftime(format = "%H:%M:%S",
tz = "GMT",
usetz = TRUE)
names(ref)[names(ref) == "time.parsed"] <- label
into <-
left_join(into, ref, by = c('PATH' = 'Path', 'ROW' = 'Row')) %>%
mutate(L8_Time = coalesce(paste0(colname, ".x"), paste0(colname, ".y"))) %>% select(-paste0(colname, ".x"),-paste0(colname, ".y"),-Img.Start)
}
}
times
anyNA(times$colname)
colname
allNA(times$colname)
times$colname %>% unique
times$colname
colname
times[colname]
times[colname] %>% unique()
times <- data.frame("PATH" = wrs$PATH, "ROW" = wrs$ROW, "L8_Time" = NA, "L7_Time" = NA)
mergeTime <- function(into, sat, MAXCOUNT) {
colname <- paste0(sat, "_Time")
for (i in 0:MAXCOUNT) {
ref <- timePull(Sys.Date() - i, sat)
ref$time.parsed <-
ref$time.parsed %>% strftime(format = "%H:%M:%S",
tz = "GMT",
usetz = TRUE)
names(ref)[names(ref) == "time.parsed"] <- label
into <-
left_join(into, ref, by = c('PATH' = 'Path', 'ROW' = 'Row')) %>%
mutate(L8_Time = coalesce(paste0(colname, ".x"), paste0(colname, ".y"))) %>% select(-paste0(colname, ".x"),-paste0(colname, ".y"),-Img.Start)
if (!anyNA(into[colname])) {
break
}
}
}
mergeTime(times, "L8", 5)
mergeTime <- function(into, sat, MAXCOUNT) {
colname <- paste0(sat, "_Time")
for (i in 0:MAXCOUNT) {
ref <- timePull(Sys.Date() - i, sat)
ref$time.parsed <-
ref$time.parsed %>% strftime(format = "%H:%M:%S",
tz = "GMT",
usetz = TRUE)
names(ref)[names(ref) == "time.parsed"] <- colname
into <-
left_join(into, ref, by = c('PATH' = 'Path', 'ROW' = 'Row')) %>%
mutate(L8_Time = coalesce(paste0(colname, ".x"), paste0(colname, ".y"))) %>% select(-paste0(colname, ".x"),-paste0(colname, ".y"),-Img.Start)
if (!anyNA(into[colname])) {
break
}
}
}
mergeTime(times, "L8", 5)
times
times$L8_Time %>% unique()
times <- data.frame("PATH" = wrs$PATH, "ROW" = wrs$ROW, "L8_Time" = NA, "L7_Time" = NA)
anyNA(times[colname])
Sys.Date() - 0
Sys.Date() - 1
Sys.Date() - 4
times <- data.frame("PATH" = wrs$PATH, "ROW" = wrs$ROW, "L8_Time" = NA, "L7_Time" = NA)
mergeTime <- function(into, sat, MAXCOUNT) {
colname <- paste0(sat, "_Time")
for (i in 0:MAXCOUNT) {
ref <- timePull(Sys.Date() - i, sat)
ref$time.parsed <-
ref$time.parsed %>% strftime(format = "%H:%M:%S",
tz = "GMT",
usetz = TRUE)
names(ref)[names(ref) == "time.parsed"] <- colname
into <-
left_join(into, ref, by = c('PATH' = 'Path', 'ROW' = 'Row')) %>%
mutate(L8_Time = coalesce(paste0(colname, ".x"), paste0(colname, ".y"))) %>% select(-paste0(colname, ".x"),-paste0(colname, ".y"),-Img.Start)
if (!anyNA(into[colname])) {
break
}
}
return(into)
}
times <- mergeTime(times, "L8", 5)
mergeTime <- function(into, sat, MAXCOUNT) {
colname <- paste0(sat, "_Time")
for (i in 0:MAXCOUNT) {
print(i)
ref <- timePull(Sys.Date() - i, sat)
ref$time.parsed <-
ref$time.parsed %>% strftime(format = "%H:%M:%S",
tz = "GMT",
usetz = TRUE)
names(ref)[names(ref) == "time.parsed"] <- colname
into <-
left_join(into, ref, by = c('PATH' = 'Path', 'ROW' = 'Row')) %>%
mutate(L8_Time = coalesce(paste0(colname, ".x"), paste0(colname, ".y"))) %>% select(-paste0(colname, ".x"),-paste0(colname, ".y"),-Img.Start)
if (!anyNA(into[colname])) {
print("breaking")
break
}
}
return(into)
}
times
times
name(times$PATH)
names(time$Path)
names(times$PATH)
names(times)
rbind(times, data.frame("Times" = NA))
cbind(times, data.frame("Times" = NA))
times <- data.frame("PATH" = wrs$PATH, "ROW" = wrs$ROW, "L8_Time" = NA, "L7_Time" = NA, "Time" = NA)
mergeTime <- function(into, sat, MAXCOUNT) {
for (i in 0:MAXCOUNT) {
ref <- timePull(Sys.Date() - i, sat)
ref$time.parsed <-
ref$time.parsed %>% strftime(format = "%H:%M:%S",
tz = "GMT",
usetz = TRUE)
names(ref)[names(ref) == "time.parsed"] <- Time
into <-
left_join(into, ref, by = c('PATH' = 'Path', 'ROW' = 'Row')) %>%
mutate(Time = coalesce(Time.x, Time.y)) %>% select(-Time.x,-Time.y,-Img.Start)
if (!anyNA(into[colname])) {
print("breaking")
break
}
}
colname <- paste0(sat, "_Time")
#Rename the column of acquisition times "L8_Times" or "L7_Times" and add column "Times" to be NA so function can be repeated
names(into)[names(into) == "Time"] <- colname
return(cbind(into, data.frame("Times" = NA)))
}
times <- mergeTime(times, "L8", 5)
mergeTime <- function(into, sat, MAXCOUNT) {
for (i in 0:MAXCOUNT) {
ref <- timePull(Sys.Date() - i, sat)
ref$time.parsed <-
ref$time.parsed %>% strftime(format = "%H:%M:%S",
tz = "GMT",
usetz = TRUE)
names(ref)[names(ref) == "time.parsed"] <- "Time"
into <-
left_join(into, ref, by = c('PATH' = 'Path', 'ROW' = 'Row')) %>%
mutate(Time = coalesce(Time.x, Time.y)) %>% select(-Time.x,-Time.y,-Img.Start)
if (!anyNA(into[colname])) {
print("breaking")
break
}
}
colname <- paste0(sat, "_Time")
#Rename the column of acquisition times "L8_Times" or "L7_Times" and add column "Times" to be NA so function can be repeated
names(into)[names(into) == "Time"] <- colname
return(cbind(into, data.frame("Times" = NA)))
}
times <- mergeTime(times, "L8", 5)
times
times <- data.frame("PATH" = wrs$PATH, "ROW" = wrs$ROW, "Time" = NA)
mergeTime <- function(into, sat, MAXCOUNT) {
for (i in 0:MAXCOUNT-1) {
ref <- timePull(Sys.Date() - i, sat)
ref$time.parsed <-
ref$time.parsed %>% strftime(format = "%H:%M:%S",
tz = "GMT",
usetz = TRUE)
names(ref)[names(ref) == "time.parsed"] <- "Time"
into <-
left_join(into, ref, by = c('PATH' = 'Path', 'ROW' = 'Row')) %>%
mutate(Time = coalesce(Time.x, Time.y)) %>% select(-Time.x,-Time.y,-Img.Start)
if (!anyNA(into[colname])) {
print("breaking")
break
}
}
colname <- paste0(sat, "_Time")
#Rename the column of acquisition times "L8_Times" or "L7_Times" and add column "Times" to be NA so function can be repeated
names(into)[names(into) == "Time"] <- colname
return(cbind(into, data.frame("Times" = NA)))
}
times <- mergeTime(times, "L8", 5)
times <- data.frame("PATH" = wrs$PATH, "ROW" = wrs$ROW, "Time" = NA)
mergeTime <- function(into, sat, MAXCOUNT) {
for (i in 0:MAXCOUNT-1) {
ref <- timePull(Sys.Date() - i, sat)
ref$time.parsed <-
ref$time.parsed %>% strftime(format = "%H:%M:%S",
tz = "GMT",
usetz = TRUE)
names(ref)[names(ref) == "time.parsed"] <- "Time"
into <-
left_join(into, ref, by = c('PATH' = 'Path', 'ROW' = 'Row')) %>%
mutate(Time = coalesce(Time.x, Time.y)) %>% select(-Time.x,-Time.y,-Img.Start)
if (!anyNA(into$Time)) {
break
}
}
colname <- paste0(sat, "_Time")
#Rename the column of acquisition times "L8_Times" or "L7_Times" and add column "Times" to be NA so function can be repeated
names(into)[names(into) == "Time"] <- colname
return(cbind(into, data.frame("Times" = NA)))
}
times <- mergeTime(times, "L8", 5)
times
times$L8_Time %>% unique()
wrs <- st_read('Data/In/Landsat/wrs2_cleaned.shp')
times <- data.frame("PATH" = wrs$PATH, "ROW" = wrs$ROW, "Time" = NA)
mergeTime <- function(into, sat, MAXCOUNT) {
for (i in 0:MAXCOUNT-1) {
ref <- timePull(Sys.Date() - i, sat)
ref$time.parsed <-
ref$time.parsed %>% strftime(format = "%H:%M:%S",
tz = "GMT",
usetz = TRUE)
names(ref)[names(ref) == "time.parsed"] <- "Time"
into <-
left_join(into, ref, by = c('PATH' = 'Path', 'ROW' = 'Row')) %>%
mutate(Time = coalesce(Time.x, Time.y)) %>% select(-Time.x,-Time.y,-Img.Start)
if (!anyNA(into$Time)) {
break
}
}
colname <- paste0(sat, "_Time")
#Rename the column of acquisition times "L8_Times" or "L7_Times" and add column "Times" to be NA so function can be repeated
names(into)[names(into) == "Time"] <- colname
return(cbind(into, data.frame("Times" = NA)))
}
times <- mergeTime(times, "L8", 50)
times$L8_Time
isNA(times$L8_Time)
is.na(times$L8_Time)
isNA(times$L8_Time) %>% sum()
is.na(times$L8_Time) %>% sum()
length(which(times$L8_Time != 0))
length(which(times$L8_Time != 0)) + length(which(times$L8_Time != 0))
length(times[,1])
length(times)
length(times$PATH)
length(which(times$L8_Time == FALSE))
length(which(times$L8_Time == TRUE))
is.na(times$L8_Time) %>% which(==FALSE)
is.na(times$L8_Time) %>% which(FALSE)
is.na(times$L8_Time) %>% which(FALSE) %>% length()
is.na(times$L8_Time) %>% which(TRUE) %>% length()
is.na(times$L8_Time)
TIMES
times
timePull <- function(date, sat){
month <- month(date, label = T)
year <- year(date)
date <- format(date, format = "%b-%d-%Y")
url <- paste0('https://landsat.usgs.gov/landsat/all_in_one_pending_acquisition/',sat,'/Pend_Acq/y',year,'/',month,'/',date,'.txt')
read_fwf(url, fwf_widths(c(5,5,20,NA)), col_types = c('ii??')) %>%
filter(!is.na(X1)) %>%
select(Path = X1, Row = X2, Img.Start = X3) %>%
mutate(time.parsed = parse_date_time(Img.Start,'j-HMS'))
}
wrs <- st_read('Data/In/Landsat/wrs2_cleaned.shp')
times <- data.frame("PATH" = wrs$PATH, "ROW" = wrs$ROW)
wrs <- st_read('Data/In/Landsat/wrs2_cleaned.shp')
times <- data.frame("PATH" = wrs$PATH, "ROW" = wrs$ROW)
mergeTime <- function(into, sat, MAXCOUNT) {
into <- cbind(into, data.frame("Times" = NA))
for (i in 0:MAXCOUNT-1) {
ref <- timePull(Sys.Date() - i, sat)
ref$time.parsed <-
ref$time.parsed %>% strftime(format = "%H:%M:%S",
tz = "GMT",
usetz = TRUE)
names(ref)[names(ref) == "time.parsed"] <- "Time"
into <-
left_join(into, ref, by = c('PATH' = 'Path', 'ROW' = 'Row')) %>%
mutate(Time = coalesce(Time.x, Time.y)) %>% select(-Time.x,-Time.y,-Img.Start)
if (!anyNA(into$Time)) {
break
}
}
colname <- paste0(sat, "_Time")
#Rename the column of acquisition times "L8_Times" or "L7_Times" and add column "Times" to be NA so function can be repeated
names(into)[names(into) == "Time"] <- colname
}
times <- mergeTime(times, "L8", 100)
times <- mergeTime(times, "L7", 100)
wrs <- st_read('Data/In/Landsat/wrs2_cleaned.shp')
times <- data.frame("PATH" = wrs$PATH, "ROW" = wrs$ROW)
mergeTime <- function(into, sat, MAXCOUNT) {
into <- cbind(into, data.frame("Time" = NA))
for (i in 0:MAXCOUNT-1) {
ref <- timePull(Sys.Date() - i, sat)
ref$time.parsed <-
ref$time.parsed %>% strftime(format = "%H:%M:%S",
tz = "GMT",
usetz = TRUE)
names(ref)[names(ref) == "time.parsed"] <- "Time"
into <-
left_join(into, ref, by = c('PATH' = 'Path', 'ROW' = 'Row')) %>%
mutate(Time = coalesce(Time.x, Time.y)) %>% select(-Time.x,-Time.y,-Img.Start)
if (!anyNA(into$Time)) {
break
}
}
colname <- paste0(sat, "_Time")
#Rename the column of acquisition times "L8_Times" or "L7_Times" and add column "Times" to be NA so function can be repeated
names(into)[names(into) == "Time"] <- colname
}
times <- mergeTime(times, "L8", 100)
times <- mergeTime(times, "L7", 100)
times
times
times <- data.frame("PATH" = wrs$PATH, "ROW" = wrs$ROW)
times <- mergeTime(times, "L7", 16)
times
mergeTime <- function(into, sat, MAXCOUNT) {
into <- cbind(into, data.frame("Time" = NA))
for (i in 0:MAXCOUNT-1) {
ref <- timePull(Sys.Date() - i, sat)
ref$time.parsed <-
ref$time.parsed %>% strftime(format = "%H:%M:%S",
tz = "GMT",
usetz = TRUE)
names(ref)[names(ref) == "time.parsed"] <- "Time"
into <-
left_join(into, ref, by = c('PATH' = 'Path', 'ROW' = 'Row')) %>%
mutate(Time = coalesce(Time.x, Time.y)) %>% select(-Time.x,-Time.y,-Img.Start)
if (!anyNA(into$Time)) {
break
}
}
colname <- paste0(sat, "_Time")
#Rename the column of acquisition times "L8_Times" or "L7_Times" and add column "Times" to be NA so function can be repeated
names(into)[names(into) == "Time"] <- colname
return(into)
}
times <- mergeTime(times, "L8", 16)
times <- data.frame("PATH" = wrs$PATH, "ROW" = wrs$ROW)
mergeTime <- function(into, sat, MAXCOUNT) {
into <- cbind(into, data.frame("Time" = NA))
for (i in 0:MAXCOUNT-1) {
ref <- timePull(Sys.Date() - i, sat)
ref$time.parsed <-
ref$time.parsed %>% strftime(format = "%H:%M:%S",
tz = "GMT",
usetz = TRUE)
names(ref)[names(ref) == "time.parsed"] <- "Time"
into <-
left_join(into, ref, by = c('PATH' = 'Path', 'ROW' = 'Row')) %>%
mutate(Time = coalesce(Time.x, Time.y)) %>% select(-Time.x,-Time.y,-Img.Start)
if (!anyNA(into$Time)) {
break
}
}
colname <- paste0(sat, "_Time")
#Rename the column of acquisition times "L8_Times" or "L7_Times" and add column "Times" to be NA so function can be repeated
names(into)[names(into) == "Time"] <- colname
return(into)
}
times <- mergeTime(times, "L8", 3)
times <- mergeTime(times, "L7", 3)
times
times$L7_Time %>% unique()
wrs <- st_read('Data/In/Landsat/wrs2_cleaned.shp')
times <- data.frame("PATH" = wrs$PATH, "ROW" = wrs$ROW)
mergeTime <- function(into, sat, MAXCOUNT) {
into <- cbind(into, data.frame("Time" = NA))
for (i in 0:MAXCOUNT-1) {
ref <- timePull(Sys.Date() - i, sat)
ref$time.parsed <-
ref$time.parsed %>% strftime(format = "%H:%M:%S",
tz = "GMT",
usetz = TRUE)
names(ref)[names(ref) == "time.parsed"] <- "Time"
into <-
left_join(into, ref, by = c('PATH' = 'Path', 'ROW' = 'Row')) %>%
mutate(Time = coalesce(Time.x, Time.y)) %>% select(-Time.x,-Time.y,-Img.Start)
if (!anyNA(into$Time)) {
break
}
}
colname <- paste0(sat, "_Time")
#Rename the column of acquisition times "L8_Times" or "L7_Times" and add column "Times" to be NA so function can be repeated
names(into)[names(into) == "Time"] <- colname
return(into)
}
times <- mergeTime(times, "L8", 80)
times <- mergeTime(times, "L7", 80)
times
times$L7_Time
times
wrs
left_join(wrs, times)
joined <- left_join(wrs, times)
joined$L7_Time == NA
joined$L7_Time %>% is.na()
joined[joined$L7_Time %>% is.na(),] %>% mapview()
wrs <- st_read('Data/In/Landsat/wrs2_cleaned.shp')
wrs <- wrs[wrs$MODE == 'D',]
wrs
joined <- left_join(wrs, times)
joined
joined
joined %>% attributes()
joined %>% filter(joined$L8_Time %>% is.na)
joined %>% filter(joined$L8_Time %>% is.na) %>% mapview()
joined %>% filter(joined$L7_Time %>% is.na) %>% mapview()
st_write(joined, 'Data/In/Landsat/wrs2_datetime_cleaned.shp')
wrs <- st_read('Data/In/Landsat/wrs2_datetime_cleaned.shp') %>% filter(MODE == 'D')
wrs %>% unique()
joined %>% unique()
joined <- joined %>% unique()
joined$PATH == wrs$PATH
(joined$PATH == wrs$PATH) %>% all()
(joined$ROW == wrs$ROW) %>% all()
(joined$geometry == wrs$geometry) %>% all()
st_write(joined, "Data/In/wrs2_cleaned_datetime.shp")
joined
wrs <- st_read('Data/In/Landsat/wrs2_cleaned_datetime.shp') %>% filter(MODE == 'D')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('Sandbox.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('Sandbox.R')
#Read the wrs tiles
wrs <- st_read('Data/In/Landsat/wrs2_cleaned_datetime.shp') %>% filter(MODE == 'D')
wrs
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
#Lookup tables for Landsat 7 and 8
ls8 <-
read.csv('Data/In/Landsat/landsat8_lookup.csv') %>% cbind("Satellite" = "Landsat8")
ls8$Satellite[[1]]
ls8$Satellite[[1]]  == "Landsat8"
wrs$L8_Time
is.na(wrs$L8_Time[946])
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
library(shiny); runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
?icon()
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
runApp('OverpassR.R')
library(shiny); runApp('OverpassR.R')
runApp('OverpassR.R')
library(shiny); runApp('OverpassR.R')
